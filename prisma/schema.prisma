// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  role              String    @default("user")
  address           String?   @unique
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  sessions          Session[]
  wallets           Wallet[]
  transactions      Transaction[]
  refreshTokens     RefreshToken[]
  invoices          Invoice[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wallet {
  id               String        @id @default(cuid())
  address          String        @unique
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  fromTransactions Transaction[] @relation("FromTransactions")
  toTransactions   Transaction[] @relation("ToTransactions")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  isDefault        Boolean       @default(false)
  name             String?
  type             String        @default("external") // external, internal
  chainId          Int?          // For multi-chain support
}

model Transaction {
  id           String   @id @default(cuid())
  amount       Float
  currency     String
  status       String
  fromWalletId String
  toWalletId   String
  fromWallet   Wallet   @relation("FromTransactions", fields: [fromWalletId], references: [id])
  toWallet     Wallet   @relation("ToTransactions", fields: [toWalletId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}

model Invoice {
  id            String    @id @default(cuid())
  number        String    @unique
  clientName    String
  clientEmail   String
  clientAddress String
  amount        Float
  currency      String
  status        String    @default("draft")
  dueDate       DateTime
  description   String?
  notes         String?
  terms         String?
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  items         InvoiceItem[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model InvoiceItem {
  id          String   @id @default(cuid())
  description String
  quantity    Float
  price       Float
  tax         Float?
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  createdAt   DateTime @default(now())
}
